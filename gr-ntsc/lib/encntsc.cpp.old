#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <iostream>

#include "encntsc.h"

#define ZLEVEL          0.3f
#define LINE_LENGTH     635
#define LINES_PER_FRAME 262
#define FRAME_LENGTH    (LINE_LENGTH * LINES_PER_FRAME)

int lines = 262; // 242 for lines, 9 for sync, 11 for blank
int N = FRAME_LENGTH;

void init_frame(float* luma, float* chroma_u, float* chroma_v, int n){
    //Initialize Luma Array
    for (int i = 0; i < 242*LINE_LENGTH; i += LINE_LENGTH){
        for (int j = i; j < i+LINE_LENGTH; j++){
            if (j-i>=0 && j-i<47) luma[j] = 0.0f;
            else if ((j-i>=47 && j-i<47+47) || (j-i>=635-15 && j-i<635)) luma[j] = ZLEVEL;
            else luma[j] = 0.42f; //Random, will be overwritten
        }
    }

    for (int i = 242*LINE_LENGTH; i < 245*LINE_LENGTH; i += LINE_LENGTH){
        for (int j = i; j < i+LINE_LENGTH; j++){
            if ((j-i>=0 && j-i<25) || (j-i>=25+292 && j-i<25+292+25)) luma[j] = 0.0f;
            else luma[j] = ZLEVEL;
        }
    }

    for (int i = 245*LINE_LENGTH; i < 248*LINE_LENGTH; i += LINE_LENGTH){
        for (int j = i; j < i+LINE_LENGTH; j++){
            if ((j-i>=0 && j-i<272) || (j-i>=272+45 && j-i<272+45+273)) luma[j] = 0.0f;
            else luma[j] = ZLEVEL;

        }
    }

    for (int i = 248*LINE_LENGTH; i < 251*LINE_LENGTH; i += LINE_LENGTH){
        for (int j = i; j < i+LINE_LENGTH; j++){
            if ((j-i>=0 && j-i<25) || (j-i>=25+292 && j-i<25+292+25)) luma[j] = 0.0f;
            else luma[j] = ZLEVEL;
        }
    }

    for (int i = 251*LINE_LENGTH; i < 262*LINE_LENGTH; i += LINE_LENGTH){
        for (int j = i; j < i+LINE_LENGTH; j++){
            if (j-i>=0 && j-i<47) luma[j] = 0.0f;
            else luma[j] = ZLEVEL;
        }
    }

    //Initialize Chroma Arrays
    for (int i = 0; i < 242*LINE_LENGTH; i += LINE_LENGTH){
        for (int j = i; j < i+LINE_LENGTH; j++){
            if (j-i>=53 && j-i<53+25) chroma_u[j] = -0.3f;
            else chroma_u[j] = 0.0f;

            chroma_v[j] = 0.0f;
        }
    }

    for (int i = 242*LINE_LENGTH; i < 262*LINE_LENGTH; i++){
        chroma_u[i] = 0.0f;
        chroma_v[i] = 0.0f;
    }
}

void free_frame(frame f){
    free(f.luma);
    free(f.chroma_u);
    free(f.chroma_v);
}

frame new_frame(){
    frame f;
    f.luma = (float*)calloc(FRAME_LENGTH, sizeof(float)); 
    f.chroma_u = (float*)calloc(FRAME_LENGTH, sizeof(float)); 
    f.chroma_v = (float*)calloc(FRAME_LENGTH, sizeof(float));

    f.length = FRAME_LENGTH;

    return f;
}

frame get_reference_frame(){
    frame f = new_frame();
    init_frame(f.luma, f.chroma_u, f.chroma_v, FRAME_LENGTH);

    return f;
}

NTSCEncoder new_ntscencoder(char *filename){
    NTSCEncoder ret;
    ret.success = true;
    return ret;
}

/*int main(int argc, char* argv[])
{ 
    NTSCEncoder enc = new_encoder(argv[1]);

    //begin_proc(cap); 
    
    frame f = new_frame();
    frame ref_frame = get_reference_frame();
    
    double usec_per_frame = 1000000.0/enc.fps;
    long int t1;
    for(;;){
        t1 = getusec();
        
        if (!get_frame(enc, f, ref_frame))
            break;

        write_frame_to_file(f);
        
        char key = cvWaitKey(10);
        if (key == 27) // ESC
            break;
        
        ttill(t1, usec_per_frame);
    }

    return 0;
}*/

    
